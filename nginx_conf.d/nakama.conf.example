# Configure global proxy settings
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Real-IP $remote_address;

# Nakama gRPC API.
server {
  listen 7349 ssl;
  listen [::]:7349 ssl;

  # Domain names this server should respond to.
  server_name nakama.example.com;

  # SSL certificate configuration.
  ssl_certificate         /etc/letsencrypt/live/nakama/fullchain.pem;
  ssl_certificate_key     /etc/letsencrypt/live/nakama/privkey.pem;
  ssl_trusted_certificate /etc/letsencrypt/live/nakama/chain.pem;
  ssl_dhparam /etc/letsencrypt/dhparams/dhparam.pem;

  location / {
    proxy_pass http://nakama:7349;
  }
}


# Nakama admin console.
server {
  listen 7351 ssl;
  listen [::]:7351 ssl;

  # Domain names this server should respond to.
  server_name nakama.example.com;

  # SSL certificate configuration.
  ssl_certificate         /etc/letsencrypt/live/nakama/fullchain.pem;
  ssl_certificate_key     /etc/letsencrypt/live/nakama/privkey.pem;
  ssl_trusted_certificate /etc/letsencrypt/live/nakama/chain.pem;
  ssl_dhparam /etc/letsencrypt/dhparams/dhparam.pem;

  location / {
    proxy_pass http://nakama:7351;
  }

}


# Nakama HTTP API.
server {
  listen 7350 ssl;
  listen [::]:7350 ssl;

  # Domain names this server should respond to.
  server_name nakama.example.com;

  # SSL certificate configuration.
  ssl_certificate         /etc/letsencrypt/live/nakama/fullchain.pem;
  ssl_certificate_key     /etc/letsencrypt/live/nakama/privkey.pem;
  ssl_trusted_certificate /etc/letsencrypt/live/nakama/chain.pem;
  ssl_dhparam /etc/letsencrypt/dhparams/dhparam.pem;

  location / {
    # Enable CORS from anywhere with support for pre-flight requests.
    # See: https://enable-cors.org/server_nginx.html
    if ($request_method = 'OPTIONS') {
       add_header 'Access-Control-Allow-Origin' '*';
       add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
       add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
       # Tell client that this pre-flight info is valid for 20 days
       add_header 'Access-Control-Max-Age' 1728000;
       add_header 'Content-Type' 'text/plain; charset=utf-8';
       add_header 'Content-Length' 0;
       return 204;
    }
    if ($request_method = 'POST') {
       add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
       add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
       add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
    }
    if ($request_method = 'GET') {
       add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
       add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
       add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
    }
 
    proxy_pass http://nakama:7350;
  }
 
  location /ws {
    # Enable CORS from anywhere with support for pre-flight requests.
    # See: https://enable-cors.org/server_nginx.html
    if ($request_method = 'OPTIONS') {
       add_header 'Access-Control-Allow-Origin' '*';
       add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
       add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
       # Tell client that this pre-flight info is valid for 20 days
       add_header 'Access-Control-Max-Age' 1728000;
       add_header 'Content-Type' 'text/plain; charset=utf-8';
       add_header 'Content-Length' 0;
       return 204;
    }
    if ($request_method = 'POST') {
       add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
       add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
       add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
    }
    if ($request_method = 'GET') {
       add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
       add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
       add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
    }

    proxy_pass http://nakama:7350/ws;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "Upgrade";
  }
}

# EchoRelay API
server {
  listen 6789 ssl;
  listen [::]:6789 ssl;

  # Domain names this server should respond to.
  server_name nakama.example.com;

  # SSL certificate configuration.
  ssl_certificate         /etc/letsencrypt/live/nakama/fullchain.pem;
  ssl_certificate_key     /etc/letsencrypt/live/nakama/privkey.pem;
  ssl_trusted_certificate /etc/letsencrypt/live/nakama/chain.pem;
  ssl_dhparam /etc/letsencrypt/dhparams/dhparam.pem;

  location / {
    proxy_pass http://nakama:7349;
  }
}



# vim: ft=nginx
